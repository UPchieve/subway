#include:
#  - template: Auto-DevOps.gitlab-ci.yml

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .npm

variables:
  AUTO_DEVOPS_BUILD_IMAGE_CNB_ENABLED: "true"
  AUTO_DEVOPS_BUILD_IMAGE_CNB_BUILDER: "heroku/buildpacks:20"
  npm_config_cache: "$CI_PROJECT_DIR/.npm"
  NEW_RELIC_ENABLED: "false"
  NEW_RELIC_NO_CONFIG_FILE: "true"

build:
  stage: build
  image: "docker:20.10.6"
  cache: {}
  tags:
    - upchieve
  variables:
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:20.10.6-dind
  script:
    - |
      if [[ -z "$CI_COMMIT_TAG" ]]; then
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_SHA}
      else
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_TAG}
      fi
    - export image_tagged="$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
    - export image_cache="$CI_REGISTRY_IMAGE/cache-image:latest"
    - export image_latest="$CI_APPLICATION_REPOSITORY:latest"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - apk add --update curl tar
    - (curl -sSL "https://github.com/buildpacks/pack/releases/download/v0.26.0/pack-v0.26.0-linux.tgz" | tar -C /usr/local/bin/ --no-same-owner -xzv pack)
    - |
      pack build "$image_tagged" \
        --creation-time now \
        --builder heroku/buildpacks:20 \
        --buildpack registry.gitlab.com/upchieve/doppler-buildpack \
        --buildpack heroku/nodejs \
        --buildpack heroku/procfile@0.6.2 \
        --publish
  rules:
    - if: '$CI_COMMIT_TAG || $CI_COMMIT_BRANCH'

testfrontend:
  stage: test
  image: node:16.8.0-bullseye
  tags:
    - upchieve
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run test:frontend
  needs: []
  rules:
    - if: '$TEST_DISABLED'
      when: never
    - if: '$CI_COMMIT_TAG || $CI_COMMIT_BRANCH'

testbackend:
  stage: test
  image: node:16.8.0-bullseye
  tags:
    - upchieve
  variables:
    NODE_OPTIONS: --max_old_space_size=5120
  services:
    - redis:latest
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run test:backend
  needs: []
  rules:
    - if: '$TEST_DISABLED'
      when: never
    - if: '$CI_COMMIT_TAG || $CI_COMMIT_BRANCH'


testdatabase:
  stage: test
  image: node:16.8.0-bullseye
  tags:
    - upchieve
  variables:
    NODE_OPTIONS: --max_old_space_size=5120
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "/certs/client"
    DOCKER_TLS_CERTDIR: "/certs"
    TESTCONTAINERS_HOST_OVERRIDE: docker
    CI_CONTAINER: "true"
  services:
    - docker:20.10.6-dind
  before_script:
    - npm ci --cache .npm --prefer-offline
    - curl -fsSL https://get.docker.com -o get-docker.sh
    - VERSION=20.10.6 sh ./get-docker.sh
  script:
    - npm run test:database
  needs: []
  rules:
    - if: '$TEST_DISABLED'
      when: never
    - if: '$CI_COMMIT_TAG || $CI_COMMIT_BRANCH'

lint:
  stage: test
  image: node:16.8.0-bullseye
  tags:
    - upchieve
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run lint
  needs: []
  rules:
    - if: '$TEST_DISABLED'
      when: never
    - if: '$CI_COMMIT_TAG || $CI_COMMIT_BRANCH'

pages:
  stage: deploy
  image: node:16.8.0-bullseye
  tags:
    - upchieve
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run build-storybook -- -o public
  artifacts:
    paths:
      - public
  only:
    - main
