openapi: 3.0.0
info:
  description: |
    UPchieve backend API
    [http://swagger.io](http://swagger.io) or on
    [irc.freenode.net, #swagger](http://swagger.io/irc/).
  version: "1.0.0"
  title: UPchieve
  contact:
    email: tech@upchieve.org
  license:
    name: Non-Profit Open Software License 3.0
    url: 'https://gitlab.com/upchieve/subway/-/blob/main/LICENSE'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/upchieveorg/subway/1.0.0
  - url: 'https://app.upchieve.org/v1'
tags:
  - name: students
    description: Actions taken on or for a student user
  - name: utility
    description: Infrastructure/Metadata
paths:
  /healthz:
    get:
      tags:
        - utility
      summary: Healthcheck and Metadata
      operationId: healthcheck
      description: |
        Confirms the service is up and provides data like the version
      responses:
        '200':
          description: successful health check
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Healthcheck'
                example:
                  version: "2.0.0"
  /students/{studentId}/favorites:
    get:
      tags:
        - students
      summary: Gets the list of a student's favorited volunteers
      responses:
        '200':
          description: The list is returned in the body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoritedVolunteerList'
        '401':
          description: User was unauthorized to make the request
        '404':
          description: Student id not found or invalid
      security:
        - cookieAuth: []
      parameters:
        - name: studentId
          in: path
          description: ID of student to get favorite list of
          required: true
          schema:
            type: string
            format: uuid
    post:
      tags:
        - students
      summary: Adds a volunteer to a student's favorites list
      responses:
        '201':
          description: The volunteer was added or removed from the student's liter
        '400':
          description: Request body was invalid or malformed
        '401':
          description: User was unauthorized to make the request
        '404':
          description: Student id not found or invalid
      security:
        - cookieAuth: []
      requestBody:
        $ref: '#/components/requestBodies/FavoritesAction'
      parameters:
        - name: studentId
          in: path
          description: ID of student to modify favorite list of
          required: true
          schema:
            type: string
            format: uuid
  /auth/login:
    post:
      tags:
        - authorization
      summary: Validates user email and password for login
      description: |
        Authenticates the user and grants a session if credentials are correct for login
      security:
        - cookieAuth: []
      requestBody:
        $ref: '#/components/requestBodies/EmailPassword'
      responses:
        '200':
          description: Authenticates the user with a session if credentials are correct and returns a user object
        '401':
          description: Unsuccessful authentication of user credentials
  /auth/logout:
    get:
      tags:
        - authorization
      summary: User logout
      description: |
        Removes the user's current session.
      security:
        - cookieAuth: []
      responses: 
        '200':
          description: User is logged out and session is ended
          content:
            application/json:
              example:
                msg: "You have been logged out"
  /auth/register/checkcred:
    post:
      tags:
        - authorization
      summary: Validate user credentials for registration
      description: |
        Check whether the credential user entered is valid. (first step of registration) The server will check for email duplications and validate the password.
      security:
        - cookieAuth: []
      requestBody:
        required: true
        $ref: '#/components/requestBodies/EmailPassword'
      responses: 
        '200':
          description: Email is not already in use and password is validated
        '409':
          description: Email already exists
        '422':
          description: Email/password not provided or password is not valid
  /auth/register/student:
    post:
      tags:
        - authorization
      summary: Register new student account
      description: |
        Creates a new account for a student from given parameters in request body
      security:
        - cookieAuth: []
      requestBody:
        description: Object is created after a form is correctly completed
        required: true
        content:
          application/json:
            schema:
                type: object
                properties:
                  email:
                    type: string
                  password:
                    type: string
                  studentPartnerOrg: 
                    type: string
                  partnerUserId: 
                    type: string
                  highSchoolId: 
                    type: string
                  partnerSite:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  college: 
                    type: string
                  terms:
                    type: boolean
      responses: 
        '200':
          description: Successful student registration and log in
        '422':
          description: |
            Any of the following can generate status code 422:
             - Missing value for term agreement
             - Missing email or password
             - Invalid password
             - Student school is not an approved partner
             - Partner school is invalid
  /auth/register/volunteer/open:
    post:
      tags:
        - authorization
      summary: Register new open volunteer account
      description: |
        Creates an open volunteer account
      security:
        - cookieAuth: []
      requestBody:
        description: Object is created after a form is correctly completed
        required: true
        content:
          application/json:
            schema:
                type: object
                properties:
                  email:
                    type: string
                  password:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  phone: 
                    type: string
                  terms:
                    type: boolean
      responses: 
        '200':
          description: Successful volunteer registration and log in
        '422':
          description: |
            Any of the following can generate status code 422:
             - Missing value for term agreement
             - Missing email or password
             - Invalid password
  /auth/register/volunteer/partner:
    post:
      tags:
        - authorization
      summary: Register new partner volunteer account
      description: |
        Creates an partner volunteer account
      security:
        - cookieAuth: []
      requestBody:
        description: Object is created after a form is correctly completed
        required: true
        content:
          application/json:
            schema:
                type: object
                properties:
                  email:
                    type: string
                  password:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  phone: 
                    type: string
                  terms:
                    type: boolean
                  volunteerPartnerOrg:
                    type: string
                  referredByCode:
                    type: string
      responses: 
        '200':
          description: Successful volunteer registration and log in
        '422':
          description: |
            Any of the following can generate status code 422:
             - Missing value for term agreement
             - Missing email or password
             - Invalid password
             - Invalid volunteer Partner
             - Invalid partner domain
  /auth/partner/volunteer:
    get:
      tags:
        - authorization
      summary: Get partner manifest for volunteer sign-up
      description: |
        Confirms partner id from link and return partner manifest
      security:
        - cookieAuth: []
      parameters:
        - name: partnerId
          in: query
          description: Where `PARTNER_ID` is the key name of the volunteer partner organization defined in `config.ts` under `volunteerPartnerManifests`
          schema:
            type: string
            example: "example3"
      responses:
        '200':
          description: Returns a volunteer partner manifest object
        '404':
          description: No manifest found for volunteer partner id
  /auth/partner/student:
    get:
      tags:
        - authorization
      summary: Get partner manifest for student sign-up
      description: |
        Confirms partner id from link and return partner manifest
      security:
        - cookieAuth: []
      parameters:
        - name: partnerId
          in: query
          description: Where `PARTNER_ID` is the key name of the volunteer partner organization defined in `config.ts` under `volunteerPartnerManifests`
          schema:
            type: string
            example: "example3"
      responses:
        '200':
          description: Returns a student partner manifest object
        '404':
          description: No manifest found for student partner id
  /auth/reset/send:
    post:
      tags:
        - authorization
      summary: Requests a password reset email
      description: |
        Sends an email to verify the current user with unique hash. The email provided
        will overwrite the user record's email, in the event that the two do not match.
      security: 
        - cookieAuth: []
      requestBody:
        description: Object is created after a form is correctly completed
        required: true
        content:
          application/json:
            schema:
                type: object
                properties: 
                  email: 
                    $ref: '#/components/schemas/Email'
      responses:
        '200':
          description: Request successful and password reset instructions sent
        '422':
          description: Missing email for password reset
  /auth/reset/confirm:
    post:
      tags:
        - authorization
      summary: Password verification
      description: |
        Confirms new password during reset
      security: 
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
                type: object
                properties: 
                  email: 
                    $ref: '#/components/schemas/Email'
                  password:
                    $ref: "#/components/schemas/Email"
                  newpassword:
                    type: string
                  token:
                    type: string
      responses:
        '200':
          description: Token is accepted and password is changed
        '422':
          description: |
            The following will generate status code 422:
            - No token given in request body
            - Missing email or password
            - Must reenter password
            - Passwords do not match
  /auth/reset/verify:
    post:
      tags:
        - authorization
      summary: Verify password reset token
      description: |
        Verify token for password reset
      security: 
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
                type: object
                properties: 
                  token:
                    type: string
      responses:
        '204':
          description: Token is valid
        '404':
          description: URL no longer valid
        '422':
          description: URL doesn't match link provided in email
  /api/calendar/save:
    post:
      tags:
        - calendar
      summary: Creates a schedule
      description: |
        Makes a schedule based on availability
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                availability:
                  type: object
                  properties: 
                    Friday:
                      $ref: "#/components/schemas/ScheduleDay"
                    Monday:
                      $ref: "#/components/schemas/ScheduleDay"
                    Saturday:
                      $ref: "#/components/schemas/ScheduleDay"
                    Sunday:
                      $ref: "#/components/schemas/ScheduleDay"
                    Tuesday:
                      $ref: "#/components/schemas/ScheduleDay"
                    Thursday:
                      $ref: "#/components/schemas/ScheduleDay"
                    Wednesday:
                      $ref: "#/components/schemas/ScheduleDay"
                tz: 
                  $ref: "#/components/schemas/TZ"
      responses:
        '200':
          description: Schedule is saved
  /api/calendar/clear:
    post:
      tags:
        - calendar
      summary: Available in backend tests only
      description: |
        Removed all preset schedule on calendar
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tz: 
                  $ref: "#/components/schemas/TZ"
      responses:
        '200':
          description: Schedule is cleared
  /api/feedback:
    get:
      tags:
        - feedback
      summary:
        - Retrieve feedback information
      description:
        - Returns feedback from given session ID and user type in query params
      security:
        - cookieAuth: []
      parameters:
        - name: sessionId
          required: true
          in: query
          schema:
            $ref: "#/components/schemas/SessionId"
        - name: userType
          required: true
          in: query
          schema:
            $ref: "#/components/schemas/UserType"
      responses:
        '200':
          description: Returns an object of feedback details
    post:
      tags:
        - feedback
      summary: Submits new feedback
      description: |
        Submits feedback survey data 
      security: 
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sessionId:
                  $ref: "#/components/schemas/SessionId"
                topic:
                  type: string
                subTopic:
                  type: string
                responseData:
                  type: string
                studentId:
                  $ref: "#/components/schemas/StudentId"
                volunteerId:
                  $ref: "#/components/schemas/VolunteerId"
                userType:
                  $ref: "#/components/schemas/UserType"
      responses:
        '200':
          description: Returns feedback id to confirm data is accepted
  /api/moderate/message:
    post:
      tags:
        - moderate message
      summary: Moderates messages
      description: |
        Check if message sent is appropriate language
      security: 
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                content:
                  type: string
      responses:
        '200':
          description: Returns a boolean object that determines whether message is clean or not
  /api/push-token/save:
    post:
      tags:
        - notification
      summary: Saves token
      description: |
        Saves push token for notifications
      security: 
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                token:
                  type: string
      responses:
        '200':
          description: Empty response with OK status code
  /api/reports/session-report:
    get:
      tags:
        - reports
      summary: Retrieves session report
      description: |
        Return all reports from session complete
      security: 
        - cookieAuth: []
      parameters:
        - name: joinedBefore
          required: true
          in: query
          schema:
            type: string
        - name: joinedAfter
          required: true
          in: query
          schema:
            type: string
        - name: sessionRangeFrom
          required: true
          in: query
          schema:
            type: string
        - name: sessionRangeTo
          required: true
          in: query
          schema:
            type: string
        - name: highSchoolId
          required: true
          in: query
          schema:
            type: string
        - name: studentPartnerOrg
          required: true
          in: query
          schema:
            type: string
        - name: studentPartnerOrg
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Returns an object with an array of sessions
  /api/reports/usage-report: 
    get:
      tags:
        - reports
      summary: Retrieves usage report
      description: |
        Retrieves usage report
      security: 
        - cookieAuth: []
      parameters:
        - name: joinedBefore
          required: true
          in: query
          schema:
            type: string
        - name: joinedAfter
          required: true
          in: query
          schema:
            type: string
        - name: sessionRangeFrom
          required: true
          in: query
          schema:
            type: string
        - name: sessionRangeTo
          required: true
          in: query
          schema:
            type: string
        - name: highSchoolId
          required: true
          in: query
          schema:
            type: string
        - name: studentPartnerOrg
          required: true
          in: query
          schema:
            type: string
        - name: studentPartnerOrg
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Returns an object with a list of student usage reports
  /api/reports/volunteer-partner-report:
    post:
      tags:
        - reports
      summary: Retrieves volunteer partner reports
      description: |
        Retrieves volunteer partner reports
      security: 
        - cookieAuth: []
      parameters:
        - name: fromDate
          required: true
          in: query
          schema:
            type: string
        - name: toDate
          required: true
          in: query
          schema:
            type: string
        - name: partnerOrg
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Returns an object (data) with an array of volunteer partner reports
  /api/session/new:
    post:
      tags:
        - session
      summary: Starts a new session
      description: |
        Submits details to establish and create a session ID
      security: 
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                sessionType:
                  $ref: '#/components/schemas/SessionType'
                sessionSubTopic:
                  $ref: '#/components/schemas/SessionSubTopic'
      responses:
        '200':
          description: Returns an object with a session Id
        '500':
          description: |
            - If request for new session is from volunteer
            - Bad json request body
  /api/session/current:
    post:
      tags:
        - session
      summary: Looks for a current session in progress
      description: |
        Looks for current session in progress and retrieve details on session
      security: 
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                user_id:
                  $ref: '#/components/schemas/UserId'
                is_volunteer:
                  $ref: '#/components/schemas/IsVolunteer'
      responses:
        '200':
          description: Returns an object (data) with session details and the current session Id
        '404':
          description: No current session
  /api/session/latest:
    post:
      tags:
        - session
      summary: Retrieves latest session
      description: |
        Checks and retreieves the latest completed session
      security: 
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                user_id:
                  $ref: '#/components/schemas/UserId'
      responses:
        '200':
          description: Returns an object (data) with the details of the latest completed session and session Id
        '404':
          description: No latest session
  /api/session/check:
    post:
      tags:
        - session
      summary: Checks for existing session  
      description: |
        Checks session based on sessionId; if there is a session in progress use that session
      security: 
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                sessionId:
                  $ref: '#/components/schemas/SessionId'
      responses:
        '200':
          description: Returns the session id confirming the session existss
        '404':
          description: No session found
  /api/session/end:
    post:
      tags:
        - session
      summary: Ends a session
      description: |
        End the current session in progress
      security: 
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                sessionId:
                  $ref: '#/components/schemas/SessionId'
      responses:
        '200':
          description: Returns the session id confirming the session has ended
        '404':
          description: No session found
  /api/session/end-all:
    post:
      tags:
        - session
      summary: Ends all student sessions
      description: |
        - Ends all student sessions 
        - For Cypress tests
      security: 
        - cookieAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Returns an object with a boolean value
  /api/sessions:
    get:
      tags:
        - session
      summary: Get all sessions
      description: Retrieves all session completed by user
      security: 
        - cookieAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: string
        - name: showBannedUsers
          in: query
          schema:
            type: string
        - name: showTestUsers
          in: query
          schema:
            type: string
        - name: showTestUsers
          in: query
          schema:
            type: string
        - name: sessionActivityFrom
          required: true
          in: query
          schema:
            type: string
        - name: sessionActivityTo
          required: true
          in: query
          schema:
            type: string
        - name: minMessagesSent
          in: query
          schema:
            type: string
        - name: minSessionLength
          in: query
          schema:
            type: string
        - name: studentRating
          in: query
          schema:
            type: string
        - name: volunteerRating
          in: query
          schema:
            type: string
        - name: firstTimeStudent
          in: query
          schema:
            type: string
        - name: firstTimeVolunteer
          in: query
          schema:
            type: string
        - name: isReported
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Returns an object with a list of session objects
  /api/session/review:
    get:
      tags:
        - session
      summary: Retrieves session report
      description: Retrieves session report
      security: 
        - cookieAuth: []
      parameters:
        - name: users
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Returns a object with a list of sessions and page location
  /api/session/{sessionId}:
    put:
      tags:
        - session
      summary: Updates session
      description: Updates session
      security: 
        - cookieAuth: []
      parameters:
        - name: sessionId
          required: true
          in: path
          schema:
            $ref: '#/components/schemas/SessionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reviewedStudent:
                  type: boolean
                reviewedVolunteer:
                  type: boolean
                  example: false
      responses:
        '200':
          description: Returns OK message when session has been updated
  /api/session/{sessionId}/admin:
    get:
      tags:
        - session
      summary: Retrieves session details
      description: Retrieves session details of specific session id for admin
      security: 
        - cookieAuth: []
      parameters:
        - name: sessionId
          required: true
          in: path
          schema:
            $ref: '#/components/schemas/SessionId'
      responses:
        '200':
          description: Returns a object with details on the specified session
  /api/session/{sessionId}/notifications:
    get:
      tags:
        - session
      summary: Retrieves session notifications
      description: Retrieves a list of session notifications that were sent
      security: 
        - cookieAuth: []
      parameters:
        - name: sessionId
          required: true
          in: path
          schema:
            $ref: '#/components/schemas/SessionId'
      responses:
        '200':
          description: Returns a object with a list of notifications for specified session
  /api/session/{sessionId}/photo-url:
    get:
      tags:
        - session
      summary: Retrieves an image url
      description: Retrieves an upload url to upload image in the session
      security: 
        - cookieAuth: []
      parameters:
        - name: sessionId
          required: true
          in: path
          schema:
            $ref: '#/components/schemas/SessionId'
      responses:
        '200':
          description: Returns a object with assigned image url and upload url
  /api/session/{sessionId}/report:
    post:
      tags:
        - session
      summary: Reports a session
      description: Sends details for reporting a session
      security: 
        - cookieAuth: []
      parameters:
        - name: sessionId
          required: true
          in: path
          schema:
            $ref: '#/components/schemas/SessionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reportReason:
                  type: string
                reportMessage:
                  type: string
      responses:
        '200':
          description: Report has been submitted for the session
        '401':
          description: |
            - Missing session ID or session
            - Missing volunteer
            - Missing user ID
  /api/session/{sessionId}/timed-out:
    post:
      tags:
        - session
      summary: Times out a session 
      description: Sets a session time out after 15 or 45 minutes in session
      security: 
        - cookieAuth: []
      parameters:
        - name: sessionId
          required: true
          in: path
          schema:
            $ref: '#/components/schemas/SessionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                timeout:
                  type: integer
      responses:
        '200':
          description: Session has timed out
  /api/survey/presession/{:sessionId}:
    get:
      tags:
        - survey
      summary: Gets presession survey
      description: Gets presession survey
      security:
        - cookieAuth: []
      parameters:
        - name: sessionId
          required: true
          in: path
          schema:
            $ref: '#/components/schemas/SessionId'
      responses:
        '200':
          description: Responds with an object of the survey
    post:
      tags:
        - survey
      summary:  Sends answers to survey
      description: Sends answers to survey
      security:
        - cookieAuth: []
      parameters:
        - name: sessionId
          required: true
          in: path
          schema:
            $ref: '#/components/schemas/SessionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                responseData:
                  type: object
                  properties:
                    primary-goal:
                      type: object
                      properties:
                        answer:
                          type: string
                          example: 'test-prep'
                    topic-understanding:
                      type: object
                      properties:
                        answer:
                          type: integer
                          example: 1
      responses:
        '200':
          description: OK
  /api/training/course/{:courseKey}:
    get:
      tags:
        - training
      summary:  Retrieves course details
      description: Retrieves course details based on given coursekey
      security:
        - cookieAuth: []
      parameters:
        - name: courseKey
          required: true
          in: path
          schema:
            $ref: '#/components/schemas/CourseKey'
      responses:
        '200':
          description: OK
  /api/training/course/{:courseKey}/progress:
    post:
      tags:
        - training
      summary:  Sends information to get progress on course
      description: Sends for progress details based on given material key and course key
      security:
        - cookieAuth: []
      parameters:
        - name: courseKey
          required: true
          in: path
          schema:
            $ref: '#/components/schemas/CourseKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                materialKey:
                  type: string
                  example: '31rgp3'
      responses:
        '200':
          description: Responds with object detailing progress section and if the course has been completed
  /api/training/questions:
    post:
      tags:
        - training
      summary:  Requests for questions for training
      description: Sends a request for given category questions
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  $ref: "#/components/schemas/Category"
      responses:
        '200':
          description: Responds with an object of a list of question/answer objects
  /api/training/review/{:category}:
    get:
      tags:
        - training
      summary:  Retrieve review materials
      description: Sets category for retrieving review materials
      security:
        - cookieAuth: []
      parameters:
        - name: category
          required: true
          in: path
          schema:
            $ref: "#/components/schemas/Category"
      responses:
        '204':
          description: No content
  /training/score:
    post:
      tags:
        - training
      summary:  Sends answers from quiz 
      description: Sends answers from training quiz and returns a score
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  $ref: '#/components/schemas/Category'
                idAnswerMap:
                  type: object
                  properties: 
                    605a355b3bc29882261d35b4: 
                      type: string
                      example: "c"
                    605a355b3bc29882261d35c2: 
                      type: string
                      example: "c"
                    605a355b3bc29882261d35cc: 
                      type: string
                      example: "c"
                    605a355b3bc29882261d35d1: 
                      type: string
                      example: "a"
                    605a355b3bc29882261d35d5: 
                      type: string
                      example: "a"
                    605a355b3bc29882261d35e4: 
                      type: string
                      example: "c"
                    605a355b3bc29882261d35e5: 
                      type: string
                      example: "b"
                    605a355b3bc29882261d35f0: 
                      type: string
                      example: "b"
                    605a355b3bc29882261d3601: 
                      type: string
                      example: "b"
                    605a355b3bc29882261d3612:
                      type: string
                      example: "c"
                    605a355b3bc29882261d3625: 
                      type: string
                      example: "b"
      responses:
        '200':
          description: Responds with an object of the quiz score calculation
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    AvailableHour:
      type: boolean
      example: true
    Category:
      type: string
      example: 'geometry'
    CourseKey:
      type: string
      example: 'upchieve101'
    Email:
      type: string
      example: "student1@upchieve.org"
    FavoritedVolunteer:
      type: object
      required:
        - firstName
        - id
        - sessionCount
        - subjects
      properties:
        firstName:
          type: string
          minimum: 1
        id:
          type: string
          minimum: 24
          maximum: 24
        sessionCount:
          type: integer
          format: int64
        subjects:
          type: array
          items:
            type: string
    FavoritedVolunteerList:
      type: array
      items:
        $ref: '#/components/schemas/FavoritedVolunteer'
    Healthcheck:
      type: object
      required:
        - version
      properties:
        version:
          type: string 
    IsVolunteer:
      type: boolean
      example: false
    Password: 
      type: string
      example: "Password123"
    ScheduleDay: 
      type: object
      properties:
        1a:
          $ref: "#/components/schemas/UnavailableHour"
        1p:
          $ref: "#/components/schemas/UnavailableHour"
        2a: 
          $ref: "#/components/schemas/UnavailableHour"
        2p:
          $ref: "#/components/schemas/UnavailableHour"
        3a:
          $ref: "#/components/schemas/UnavailableHour"
        3p:
          $ref: "#/components/schemas/AvailableHour"
        4a:
          $ref: "#/components/schemas/UnavailableHour"
        4p:
          $ref: "#/components/schemas/AvailableHour"
        5a:
          $ref: "#/components/schemas/UnavailableHour"
        5p:
          $ref: "#/components/schemas/AvailableHour"
        6a:
          $ref: "#/components/schemas/UnavailableHour"
        6p:
          $ref: "#/components/schemas/AvailableHour"
        7a:
          $ref: "#/components/schemas/UnavailableHour"
        7p:
          $ref: "#/components/schemas/UnavailableHour"
        8a:
          $ref: "#/components/schemas/UnavailableHour"
        8p:
          $ref: "#/components/schemas/UnavailableHour"
        9a:
          $ref: "#/components/schemas/UnavailableHour"
        9p:
          $ref: "#/components/schemas/UnavailableHour"
        10a:
          $ref: "#/components/schemas/UnavailableHour"
        10p:
          $ref: "#/components/schemas/UnavailableHour"
        11a:
          $ref: "#/components/schemas/UnavailableHour"
        11p:
          $ref: "#/components/schemas/UnavailableHour"
        12a:
          $ref: "#/components/schemas/UnavailableHour"
        12p: 
          $ref: "#/components/schemas/UnavailableHour"
    SessionId:
      type: string
      example: "605a43e4bf39966c0e3c59ce"
      format: uuid
    SessionSubTopic:
      type: string
      example: 'algebraone'
    SessionType:
      type: string
      example: "math"
    StudentId:
      type: string
      example: "605a355a3bc29882261d3594"
      format: uuid
    TZ: 
      type: string
      example: "US/Arizona"
    UnavailableHour:
      type: boolean
      example: false
    UserId:
      type: string
      example: "605a355a3bc29882261d3594"
    UserType: 
      type: string
      example: "volunteer"
    VolunteerId:
      type: string
      format: uuid
    VolunteerIdList:
      type: array
      items:
        $ref: '#/components/schemas/VolunteerId'
  requestBodies:
    FavoritesAction:
      content:
        applicaton/json:
          schema:
            type: object
            required:
              - action
              - ids
            properties:
              action:
                type: string
                enum: ['add', 'remove']
              ids:
                $ref: '#/components/schemas/VolunteerIdList'
    EmailPassword:
      required: true
      content:
        application/json:
          schema:
              type: object
              properties:
                email:
                  $ref: '#/components/schemas/Email'
                password:
                  $ref: '#/components/schemas/Password'
securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: connect.sid