import { Boolean, Record, Literal, String, Number, Array } from 'runtypes'

export const Config = Record({
  NODE_ENV: String,
  SSL_CERT_PATH: String,
  host: String,
  additionalAllowedOrigins: String,
  sessionSecret: String,
  sessionCookieMaxAge: Number,
  saltRounds: Number,
  smtp: Record({
    host: String,
    port: Number,
    secure: Boolean,
    user: String,
    password: String,
  }),
  sendgrid: Record({
    apiKey: String,
    contactTemplate: String,
    verifyTemplate: String,
    resetTemplate: String,
    referralProgramTemplate: String,
    openVolunteerWelcomeTemplate: String,
    partnerVolunteerWelcomeTemplate: String,
    studentOnboardingWelcomeTemplate: String,
    reportedSessionAlertTemplate: String,
    referenceFormTemplate: String,
    referenceFormApologyTemplate: String,
    approvedNotOnboardedTemplate: String,
    openReadyToCoachTemplate: String,
    partnerReadyToCoachTemplate: String,
    customPartnerReadyToCoachTemplate: String,
    bannedUserAlertTemplate: String,
    referenceFollowupTemplate: String,
    rejectedPhotoSubmissionTemplate: String,
    rejectedReferenceTemplate: String,
    waitingOnReferencesTemplate: String,
    niceToMeetYouTemplate: String,
    weeklyHourSummaryEmailTemplate: String,
    weeklyHourSummaryIntroEmailTemplate: String,
    customWeeklyHourSummaryEmailTemplate: String,
    customWeeklyHourSummaryIntroEmailTemplate: String,
    weeklyHourSummaryApologyEmailTemplate: String,
    onboardingReminderOneTemplate: String,
    onboardingReminderTwoTemplate: String,
    onboardingReminderThreeTemplate: String,
    studentOnboardingHowItWorksTemplate: String,
    rosterStudentSetPasswordTemplate: String,
    meetOurVolunteersTemplate: String,
    studentOnboardingMissionTemplate: String,
    studentOnboardingSurveyTemplate: String,
    studentFirstSessionCongratsTemplate: String,
    studentReportedRudeTemplate: String,
    studentReportedSafetyTemplate: String,
    studentAbsentWarningTemplate: String,
    studentAbsentVolunteerApologyTemplate: String,
    studentUnmatchedApologyTemplate: String,
    studentOnlyLookingForAnswersTemplate: String,
    volunteerQuickTipsTemplate: String,
    partnerVolunteerLowHoursSelectedTemplate: String,
    volunteerFirstSessionCongratsTemplate: String,
    volunteerTenSessionMilestoneTemplate: String,
    volunteerGentleWarningTemplate: String,
    volunteerInactiveThirtyDaysTemplate: String,
    volunteerInactiveSixtyDaysTemplate: String,
    volunteerInactiveNinetyDaysTemplate: String,
    volunteerInactiveBlackoutOverTemplate: String,
    volunteerAbsentWarningTemplate: String,
    volunteerAbsentStudentApologyTemplate: String,
    failedFirstAttemptedQuizTemplate: String,
    failedFirstAttemptedTrainingTemplate: String,
    emailSessionRecapMessage: String,
    studentReportedCoachDmTemplate: String,
    unsubscribeGroup: Record({
      newsletter: Number,
      account: Number,
      volunteerSummary: Number,
    }),
    contactList: Record({
      students: String,
      volunteers: String,
    }),
  }),
  logLevel: String,
  mail: Record({
    senders: Record({
      noreply: String,
      support: String,
      recruitment: String,
      students: String,
      volunteerManager: String,
      studentOutreachManager: String,
      corporatePartnershipsManager: String,
      crisis: String,
    }),
    receivers: Record({
      contact: String,
      staff: String,
      support: String,
      recruitment: String,
      students: String,
      volunteerManager: String,
      studentOutreachManager: String,
      corporatePartnershipsManager: String,
    }),
    people: Record({
      volunteerManager: Record({
        firstName: String,
        lastName: String,
      }),
      studentOutreachManager: Record({
        firstName: String,
        lastName: String,
      }),
      corporatePartnershipsManager: Record({
        firstName: String,
        lastName: String,
      }),
    }),
  }),
  client: Record({
    host: String,
  }),
  apiPort: Number,
  socketsPort: Number,
  featureFlagPort: Number,
  socketApiKey: String,
  customVolunteerPartnerOrgs: Array(String),
  priorityMatchingPartnerOrgs: Array(String),
  priorityMatchingSponsorOrgs: Array(String),
  customAnalyticsReportPartnerOrgs: Array(String),

  clusterServerAddress: String,

  assistmentsBaseURL: String,
  assistmentsToken: String,
  assistmentsAuthSchema: String,

  cacheKeys: Record({
    updateTotalVolunteerHoursLastRun: String,
    waitTimeHeatMapAllSubjects: String,
  }),

  // Sentry Data Source Name
  sentryDsn: String,

  // Twilio Credentials
  accountSid: String,
  authToken: String,
  sendingNumber: String,
  twilioAccountVerificationServiceSid: String,
  twilioVerificationRateLimitUniqueName: String,
  twilioVerificationRateLimitMaxRetries: Number,
  twilioVerificationRateLimitIntervalSeconds: Number,

  notificationSchedule: Array(Number),
  // voice to use to render speech
  voice: Literal('man'),

  workerQueueName: String,
  redisConnectionString: String,
  redisHost: String,
  redisPort: String,
  redisPassword: String,
  postgresHost: String,
  postgresRoHost: String,
  postgresPort: Number,
  postgresUser: String,
  postgresPassword: String,
  postgresDatabase: String,
  postgresRequireSSL: Boolean,
  firebase: Record({
    projectId: String,
  }),
  bannedServiceProviders: Array(String),
  awsS3: Record({
    accessKeyId: String,
    secretAccessKey: String,
    region: String,
    photoIdBucket: String,
    sessionPhotoBucket: String,
  }),
  unleashId: String,
  unleashName: String,
  unleashUrl: String,
  posthogToken: String,
  posthogPersonalApiToken: String,
  featureFlagClientKey: String,
  vueAppUnleashUrl: String,
  whiteboardStorageAppId: String,
  whiteboardStorageTenantId: String,
  whiteboardStorageSecret: String,
  whiteboardStorageSubscriptionId: String,
  whiteboardStorageAccountName: String,
  whiteboardStorageContainer: String,
  version: String,
  fileWorkRootPath: String,
  ipWhoIsApiKey: String,
  favoriteVolunteerLimit: Number,
  eligibleIncomeThreshold: Number,
  eligibleFRLThreshold: Number,
  customManualStudentPartnerOrg: String,

  // Google
  googleClientId: String,
  googleClientSecret: String,
  googleRecaptchaSecret: String,
  googleRecaptchaThreshold: Number,

  minSessionLength: Number,

  openAIApiKey: String,
})
