/// Validates a map key and returns the associated value.
/// @param {map} $map
/// @param {string} $key
/// @return $value
@function validate-map-key($map, $key) {
  $value: map-get($map, $key);

  @if not $value {
    $keys: map-keys($map);
    @error "Invalid map key: '#{$key}'. Expected one of: [#{$keys}].";
  }

  @return $value;
}

/// Returns a z-index value based on key.
/// @param {string} $key
/// @return {number} z-index
@function get-z($key) {
  $map: (
    "below": -1,
    "above": 1,
    "sidebar": 10,
    "header": 20,
    "banner": 21,
    "modal": 30
  );

  @return validate-map-key($map, $key);
}

/// Helper to add basic flex styling.
/// @param {string} $flex-direction [row]
/// @param {string} $justify-content [initial]
/// @param {string} $align-items [initial]
@mixin flex-container(
  $flex-direction: row,
  $justify-content: initial,
  $align-items: initial
) {
  display: flex;
  flex-direction: $flex-direction;
  justify-content: $justify-content;
  align-items: $align-items;
}

/// Helper to add spacing between direct child elements.
/// @requires {function} $validate-map-key
/// @param {string} $side - 'top', 'right', 'bottom', or 'left'
/// @param {number} $spacing - the amount of spacing
@mixin child-spacing($side, $spacing) {
  $sides: (
    top: 1,
    right: 2,
    bottom: 3,
    left: 4
  );

  @if validate-map-key($sides, $side) {
    & > * {
      margin-#{$side}: $spacing;

      @if $side == top or $side == left {
        &:first-child {
          margin-#{$side}: 0;
        }
      } @else {
        &:last-child {
          margin-#{$side}: 0;
        }
      }
    }
  }
}
